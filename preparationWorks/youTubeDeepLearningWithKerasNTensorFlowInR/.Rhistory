install.packages("keras")
install_keras()
library(keras)
install_keras()
library(reticulate)
install_keras()
conda_create("r_reticulate")
use_condaenv("r_recticulate")
install_keras()
conda activate r_reticulate
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install_tensorflow(conda = "tf-keras")
install_tensorflow(conda = "tf=keras")
install_tensorflow()
install_keras()
conda_create("r-reticulate")
library(reticulate)
conda_create("r-reticulate")
install_keras()
library(keras)
install_keras()
use_condaenv(r_reticulate)
use_condaenv(r-reticulate)
use_condaenv("r-reticulate")
install_keras()
install_keras()
install_keras(conda = "tf-keras")
install_keras(conda = "tf=keras")
install_tensorflow(conda = "tf=keras")
conda_create("r-reticulate")
use_condaenv(r-reticulate)
use_condaenv(r_reticulate)
use_condaenv("r-reticulate")
conda_install("reticulate", c('keras', 'tensorflow', pip = TRUE))
remove.packages(keras)
remove.packages("keras")
remove.packages("tensorflow")
install.packages("tensorflow")
install.packages("keras")
library(keras)
library(tensorflow)
install_keras()
install_tensorflow()
install_keras
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
libary(devtools)
install.packages("devtools")
tensorflow::install_tensorflow()
devtools::install_github(rstudio/keras)
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras", force = TRUE)
tensorflow::tf_config()
tensorflow::install_tensorflow()
tensorflow::tf_config()
quit()
library(keras)
library(tensorflow)
setwd(dirname(file.choose()))
# Read data
data <- read.csv("Cardiotocographic.csv")
str(data)
# Change to matrix
data <- as.matrix(data)
dimnames(data) <- NULL
# Normalize
data[, 1:21] <- normalize(data[, 1:21])
data[,22] <- as.numeric(data[,22]) -1
summary(data)
# Data partition
set.seed(1234)
ind <- sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
training <- data[ind==1, 1:21]
test <- data[ind==2, 1:21]
trainingtarget <- data[ind==1, 22]
testtarget <- data[ind==2, 22]
# One Hot Encoding
trainLabels <- to_categorical(trainingtarget)
testLabels <- to_categorical(testtarget)
print(testLabels)
model <- keras_model_sequential()
model %>%
layer_dense(units=21, activation = 'relu', input_shape = c(21)) %>%
layer_dense(units=8, activation = 'relu') %>%
layer_dense(units = 3, activation = 'softmax')
model %>%
compile(loss = 'categorical_crossentropy',
optimizer = 'adam',
metrics = 'accuracy')
# Fit model
## 1st:
history <- model %>%
fit(training,
trainLabels,
epoch = 200,
batch_size = 32,
validation_split = 0.2)
plot(history)
# Evaluate model with test data
model1 <- model %>%
evaluate(test, testLabels)
# Prediction & confusion matrix - test data
prob <- model %>%
predict_proba(test)
pred <- model %>%
predict_classes(test)
table <- table(Predicted = pred, Actual = testtarget)
table
library(caret)
confusionMatrix(table <- table(Predicted = pred, Actual = testtarget), mode = "everything")
cbind(prob, pred, testtarget)
# Fine-tune model
